{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","url","setUrl","handleClick","channel","fetch","then","resp","json","_","window","location","href","catch","error","console","log","className","style","display","onClick","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6JAoCeA,G,KAhCH,WAAO,IAAD,EAEMC,oBAAS,GAFf,mBAETC,EAFS,KAEJC,EAFI,KAIVC,EAAc,SAACC,GACnBF,GAAO,GAEP,IAAMD,EAAG,8DAA0DG,GACnEC,MAAMJ,GACHK,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJC,OAAOC,SAASC,KAAOH,EAAER,IACzBC,GAAO,MAERW,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,eAAaF,OAG7C,OACE,6BACE,yBAAKG,UAAU,UAAUC,MAAO,CAC9BC,QAASlB,EAAM,eAAiB,SAEhC,yBAAKgB,UAAU,oBAEjB,yBAAKA,UAAU,aACb,4BAAQA,UAAU,6BAA6BG,QAAS,kBAAMjB,EAAY,UAA1E,kBACA,4BAAQc,UAAU,6BAA6BG,QAAS,kBAAMjB,EAAY,aAA1E,yBClBFkB,EAAcC,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTpB,MAAK,SAAAyB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BtB,QAAQC,IACN,iHAKEW,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBhB,QAAQC,IAAI,sCAGRW,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BlB,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,MC3FjE0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDanB,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBpC,OAAOC,SAASC,MACpDmC,SAAWrC,OAAOC,SAASoC,OAIvC,OAGFrC,OAAOsC,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,GAAN,sBAEPzB,IAgEV,SAAiCK,EAAOC,GAEtCtB,MAAMqB,EAAO,CACXuB,QAAS,CAAE,iBAAkB,YAE5B3C,MAAK,SAAA4C,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMjD,MAAK,SAAAyB,GACjCA,EAAayB,aAAalD,MAAK,WAC7BI,OAAOC,SAAS8C,eAKpBhC,EAAgBC,EAAOC,MAG1Bd,OAAM,WACLE,QAAQC,IACN,oEAvFA0C,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMjD,MAAK,WACjCS,QAAQC,IACN,iHAMJS,EAAgBC,EAAOC,OCtC/BE,I","file":"static/js/main.192a1c33.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\n\n\nconst App = () => {\n\n  const [url, setUrl] = useState(false)\n\n  const handleClick = (channel) => {\n    setUrl(true)\n\n    const url = `https://rocky-savannah-02552.herokuapp.com/?channel=${channel}`\n    fetch(url)\n      .then(resp => resp.json())\n      .then(_ => {\n        window.location.href = _.url\n        setUrl(false)\n      })\n      .catch(error => console.log('error -->', error))\n  }\n\n  return (\n    <div>\n      <div className=\"spinner\" style={{\n        display: url ? 'inline-block' : 'none'\n      }}>\n        <div className=\"actual-spinner\"></div>\n      </div>\n      <div className=\"container\">\n        <button className=\"btn btn-white btn-animated\" onClick={() => handleClick('news')}>Watch TVB News</button>\n        <button className=\"btn btn-white btn-animated\" onClick={() => handleClick('finance')}>Watch TVB Finance</button>\n      </div>\n    </div >\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}